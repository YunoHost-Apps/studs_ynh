#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE

### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_print_info "Validating installation parameters..."

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path "$path_url")

# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_print_info "Storing installation settings..."

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" is_public "$is_public"
ynh_app_setting_set "$app" language "$language"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_print_info "Installing dependencies..."

ynh_install_app_dependencies postgresql

#=================================================
# CREATE A PostgreSQL DATABASE
#=================================================
ynh_print_info "Creating a PostgreSQL database..."

ynh_psql_test_if_first_run

db_name=$(ynh_sanitize_dbid "$app")
db_user=$db_name
db_pwd=$(ynh_string_random)
ynh_app_setting_set "$app" db_name "$db_name"
ynh_app_setting_set "$app" psqlpwd "$db_pwd"

# Initialize database and store postgres password for upgrade
ynh_psql_create_db "$db_name" "$db_user" "$db_pwd"

systemctl reload postgresql

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_print_info "Setting up source files..."

ynh_app_setting_set "$app" final_path "$final_path"
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info "Configuring nginx web server..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info "Configuring system user..."

# Create a system user
ynh_system_user_create "$app"

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_print_info "Configuring php-fpm..."

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC SETUP
#=================================================
# Database initialization
#=================================================

ynh_print_info "Database initialization..."

ynh_psql_execute_file_as_root "$final_path/install.sql" "$db_name"

#=================================================
# SETUP APPLICATION WITH CURL
#=================================================

### Use these lines only if the app installation needs to be finalized through
### web forms. We generally don't want to ask the final user,
### so we're going to use curl to automatically fill the fields and submit the
### forms.

# Set right permissions for curl install
# chown -R "$app": $final_path

# Set the app as temporarily public for curl call
# ynh_print_info "Configuring SSOwat..."
# ynh_app_setting_set "$app" skipped_uris "/"
# Reload SSOwat config
# yunohost app ssowatconf

# Reload Nginx
# systemctl reload nginx

# Installation with curl
# ynh_print_info "Finalizing installation..."
# ynh_local_curl "/INSTALL_PATH" "key1=value1" "key2=value2" "key3=value3"

# Remove the public access
# if [ $is_public -eq 0 ]
# then
# 	ynh_app_setting_delete "$app" skipped_uris
# fi

#=================================================
# MODIFY A CONFIG FILE
#=================================================

### `ynh_replace_string` is used to replace a string in a file.
### (It's compatible with sed regular expressions syntax)

config_file="$final_path/variables.php"
cp ../conf/variables.php "$config_file"

ynh_replace_string "__DOMAIN__"    "$domain"     "$config_file"
ynh_replace_string "__FINALPATH__" "$final_path" "$config_file"
ynh_replace_string "__APP__"       "$app"        "$config_file"
ynh_replace_string "__DB_NAME__"   "$db_name"    "$config_file"
ynh_replace_string "__DB_USER__"   "$db_user"    "$config_file"
ynh_replace_string "__DB_PWD__"    "$db_pwd"     "$config_file"
ynh_replace_string "__LANGUAGE__"  "$language"   "$config_file"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
ynh_store_file_checksum "$config_file"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
chown -R root: "$final_path"

#=================================================
# SETUP LOGROTATE
#=================================================
#ynh_print_info "Configuring log rotation..."

### `ynh_use_logrotate` is used to configure a logrotate configuration for the logs of this app.
### Use this helper only if there is effectively a log file for this app.
### If you're not using this helper:
###		- Remove the section "BACKUP LOGROTATE" in the backup script
###		- Remove also the section "REMOVE LOGROTATE CONFIGURATION" in the remove script
###		- As well as the section "RESTORE THE LOGROTATE CONFIGURATION" in the restore script
###		- And the section "SETUP LOGROTATE" in the upgrade script

# Use logrotate to manage application logfile(s)
# TODO: ynh_use_logrotate

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

### `yunohost service add` is a CLI yunohost command to add a service in the admin panel.
### You'll find the service in the 'services' section of YunoHost admin panel.
### This CLI command would be useless if the app does not have any services (systemd or sysvinit)
### If you're not using these lines:
###		- You can remove these files in conf/.
###		- Remove the section "REMOVE SERVICE FROM ADMIN PANEL" in the remove script
###		- As well as the section "ADVERTISE SERVICE IN ADMIN PANEL" in the restore script

# TODO: yunohost service add "$app" --log "/var/log/$app/$app.log"
# if using yunohost version 3.2 or more in the 'manifest.json', a description can be added
#yunohost service add "$app" --description "$app daemon for XXX" --log "/var/log/$app/$app.log"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info "Configuring SSOwat..."

# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info "Reloading nginx web server..."

systemctl reload nginx

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info "Installation of ""$app"" completed"
